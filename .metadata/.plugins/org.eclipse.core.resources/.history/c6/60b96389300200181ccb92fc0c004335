
//generic linked list
public class LinkedList <T> {
	Node<T> head;
	int size;
	
	public LinkedList() {
		this.head = null;
		this.size = 0;
	}
	
	public void addToFront(T data) {
		Node node = new Node<T>(data, head);
		node.next = head;
		head = node;
		size +=1;
	}
	
	public void addToEnd(T data) {
		Node<T> ptr = head;
		while(ptr.next!=null) {
			ptr = ptr.next;
		}
		Node<T> node = new Node<T>(data, null); 
		ptr.next = node;
		size+=1;
	}
	
	public boolean contains(String target) {
		Node<T> ptr = head;
		while(ptr!=null) {
			if(ptr.data == target) {
				return true;
			}
			ptr = ptr.next;
		}
		return false;
	}
	

	public void addAfter(T target, T newString) {
		Node<T> ptr = head;
		while(ptr!=null) {
			if(ptr.data==target) {
				Node<T> node = new Node<T>(newString, ptr.next);
				ptr.next = node;
				break;
			}
			ptr = ptr.next;
		}
		size+=1;
	}
	
	public void addAfterLastOccurence(String target, String newString) {
		StringNode ptr = head;
		StringNode last = null;
		while(ptr!=null) {
			if(ptr.data == target) {
				last = ptr;
			}
			ptr = ptr.next;
		}
		StringNode node = new StringNode(newString, last.next);
		last.next = node;
		size+=1;
	}
	
	public void delete(String target) {
		StringNode prev = null;
		StringNode ptr = head;
		while(ptr != null && head.data != target) {
			if(ptr.data == target) {
				prev.next = ptr.next;
			}
			prev = ptr;
			ptr = ptr.next;
		}
		if(head.data == target) {
			head = head.next;
		}
		size-=1;
	}
	
	public void print() {
		Node<T> pointer = this.head;
		while(pointer!=null) {
			System.out.print(pointer.data + "->" );
			pointer = pointer.next;
		}
		System.out.println("\\");
	}
}
